#!/usr/bin/env bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR

source_db="$STORE_PGHOST:$STORE_PGPORT"
target_db="$PGHOST:$PGPORT"
if [[ "$source_db" == "$target_db" ]]; then
    if [[ "$STORE_PGDATABASE" != "$STORE_REPLICATION_TARGET_PGDATABASE" ]] ; then
        echo "error: store and admin database are the same postgres instance. in this setup, store PGDATABASE must equal the admin's store replication target PGDATABASE (aka, STORE_PGDATABASE should equal STORE_REPLICATION_TARGET_PGDATABASE; $STORE_PGDATABASE != $STORE_REPLICATION_TARGET_PGDATABASE" >&2
        exit 1
    fi
    echo "no need to set up store db replication, store db and admin db are the same"
    exit 0
fi

echo waiting for subscription target database to be up..
(
    export PGUSER=$STORE_PGUSER
    export PGPASSWORD=$STORE_PGPASSWORD
    export PGDATABASE=$STORE_PGDATABASE
    export PGHOST=$STORE_PGHOST
    export PGPORT=$STORE_PGPORT
    ./wait-db

    cd $SCRIPT_DIR/../../store-api-server
    while [ "`HOST=$PGHOST PORT=$PGPORT LOGIN=$PGUSER PASSWORD=$PGPASSWORD ./script/shmig -t postgresql -d $PGDATABASE pending`" != "" ]; do
        echo store pub not ready yet..
        sleep 1
    done
)

# must copy over table, enum definitions, etc first. Otherwise the
# subscription will not work (it will not bring over these definitions, unfortunately)

store_schema_file=`mktemp`
PGPASSWORD=$STORE_PGPASSWORD pg_dump --host=$STORE_PGHOST --port=$STORE_PGPORT --dbname=$STORE_PGDATABASE --username=$STORE_PGUSER --schema-only --format c --no-privileges --no-owner > $store_schema_file

pg_restore --no-publications --schema=public --host=$PGHOST --port=$PGPORT --username=$PGUSER --schema-only --clean --dbname=store_replication < $store_schema_file

PGDATABASE=store_replication psql -c "
    CREATE SUBSCRIPTION store_sub
    CONNECTION 'host=$STORE_PGHOST port=$STORE_PGPORT dbname=$STORE_PGDATABASE user=$STORE_PGUSER password=$STORE_PGPASSWORD'
    PUBLICATION store_pub;
"
