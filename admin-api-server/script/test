#!/usr/bin/env bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
cd $SCRIPT_DIR/..

set -a
. .env.test
set +a

function store_env_exec {
    PGHOST=$STORE_PGHOST \
        PGPORT=$STORE_PGPORT \
        PGUSER=$STORE_PGUSER \
        PGPASSWORD=$STORE_PGPASSWORD \
        PGDATABASE=$STORE_PGDATABASE \
        KANVAS_API_PORT=$STORE_API_PORT \
        $@
}

function assert_docker_ok {
    port=$1

    if [[ "$?" != "0" ]]; then
        process=`docker ps | grep $port | awk '{print $1}'`
        docker kill $process
        echo failed to start testdb, cannot run tests
        exit 1
    fi
}

db_docker=`DOCKER_ARGS='-d' DBSETUP_LOG=quiet INIT_QUEPASA=false ./script/local-db -c wal_level=logical -c log_statement=all`
assert_docker_ok $PGPORT
trap "docker kill $db_docker" EXIT

echo "waiting for testdb setup (admin).. (docker: $db_docker)"
./script/wait-db

echo "waiting for testdb setup (store).."
store_env_exec ../store-api-server/script/wait-db

echo "setting up the store db"
(
    cd $SCRIPT_DIR/../../store-api-server;
    yarn build || exit 1

    store_env_exec script/migrate >/dev/null 2>&1 || exit 1
    store_env_exec psql < script/populate-testdb.sql || exit 1
) || exit 1

echo "starting the store api in the background"
# enabling job control with set -m here, this will enforce a new process group
# for the following background spawned store api, which in turn will allow
# proper kill of all child processes by kill on process group id.
set -m
(
    cd $SCRIPT_DIR/../../store-api-server
    set -a
    . .env.test
    store_env_exec yarn run start >/dev/null 2>&1
) &
store_api_pid=$!
set +m
trap "docker kill $db_docker; kill -- -$store_api_pid" EXIT

yarn run seed || exit 1

while ! http --quiet :$STORE_API_PORT 2>/dev/null; do
    echo "store api not up yet.."
    sleep 1
done

echo "running tests.."

mkdir -p test/coverage
jest "$@" --coverage | tee test/coverage/summary.txt || exit 1
sed -n '/^-----/,$p' test/coverage/summary.txt > test/coverage/summary_.txt
head -n 4 test/coverage/summary_.txt | awk -F '|' '{print $2 $3 $4 $5}'
sed 's/^/\n/' test/coverage/summary_.txt > test/coverage/summary.txt
rm test/coverage/summary_.txt
